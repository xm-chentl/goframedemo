// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UserBuyHistoryDao is the data access object for table user_buy_history.
type UserBuyHistoryDao struct {
	table   string                // table is the underlying table name of the DAO.
	group   string                // group is the database configuration group name of current DAO.
	columns UserBuyHistoryColumns // columns contains all the column names of Table for convenient usage.
}

// UserBuyHistoryColumns defines and stores column names for table user_buy_history.
type UserBuyHistoryColumns struct {
	Id      string //
	UserId  string // 用户标识
	AppId   string // 应用标识
	AppName string // 应用名称
	BuyTime string // 购买时间
	Status  string // 订单状态#1:已付款
}

// userBuyHistoryColumns holds the columns for table user_buy_history.
var userBuyHistoryColumns = UserBuyHistoryColumns{
	Id:      "id",
	UserId:  "user_id",
	AppId:   "app_id",
	AppName: "app_name",
	BuyTime: "buy_time",
	Status:  "status",
}

// NewUserBuyHistoryDao creates and returns a new DAO object for table data access.
func NewUserBuyHistoryDao() *UserBuyHistoryDao {
	return &UserBuyHistoryDao{
		group:   "default",
		table:   "user_buy_history",
		columns: userBuyHistoryColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserBuyHistoryDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UserBuyHistoryDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UserBuyHistoryDao) Columns() UserBuyHistoryColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UserBuyHistoryDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserBuyHistoryDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserBuyHistoryDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
