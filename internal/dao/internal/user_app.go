// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UserAppDao is the data access object for table user_app.
type UserAppDao struct {
	table   string         // table is the underlying table name of the DAO.
	group   string         // group is the database configuration group name of current DAO.
	columns UserAppColumns // columns contains all the column names of Table for convenient usage.
}

// UserAppColumns defines and stores column names for table user_app.
type UserAppColumns struct {
	Id             string // 数据标识
	UserId         string // 用户标识
	AppId          string // 应用标识
	AppName        string // 应用名
	Duration       string // 有效时长(天)
	StartTime      string // 开始时间
	PrvContent     string // 私钥
	PubContent     string // 公钥
	LicenseContent string // 许可证
}

// userAppColumns holds the columns for table user_app.
var userAppColumns = UserAppColumns{
	Id:             "id",
	UserId:         "user_id",
	AppId:          "app_id",
	AppName:        "app_name",
	Duration:       "duration",
	StartTime:      "start_time",
	PrvContent:     "prv_content",
	PubContent:     "pub_content",
	LicenseContent: "license_content",
}

// NewUserAppDao creates and returns a new DAO object for table data access.
func NewUserAppDao() *UserAppDao {
	return &UserAppDao{
		group:   "default",
		table:   "user_app",
		columns: userAppColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserAppDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UserAppDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UserAppDao) Columns() UserAppColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UserAppDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserAppDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserAppDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
